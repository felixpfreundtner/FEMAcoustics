% FEM 1-D Scalar Analysis
% 1D Acoustics waveguide with piston at one end and wall at other end
% Plot: geometry, mesh, boundary nodes, and field

% Generate mesh data: mesh, boundary nodes, domains (COMSOL is used as a mesh
% generator)


%% Input data

%%
%==================================================================
% Parameters definition
% **************************************************************

% Acoustical constants
rho0 = 1.2; % Air density in kg/m^3
c0 = 340; % Speed of sound in m/s
air_damp = 0.00; % Damping by the cavity air
p_0 = 2e-5; % reference root man squared sound pressure (hearing threshold 1kHz)

% Material boundary paramters
model_Z_by_alpha = false ; % model acoustical impedances by practical more commonly measured random incidence absorption coefficients with Mommertz's (1996) method assuming phase difference p/v at boundaries is zero
% Mommertz, E. (1996): Untersuchung akustischer Wandeigenschaften und Modellierung der Schallrückwürfe in der binauralen Raumsimulation. Dissertation. RWTH Aachen, Fakultät für Elektrotechnik und Informationstechnik, S. 122. 
alpha = 0.1; % absorption coefficent wall (sound energy absorbed per reflection in percent, value range ]0,1[)
% For experts ( acoustical impedance Z=p/v respectively Admittance A=v/p in the praxis normally not measured/available):
% set model_Z_by_alpha==false -> 
Z = 2055-4678i; % acoustical impedance at wall (=sound pressure divided by particle velocity at boundary, value range ]0,inf[)

% Excitation source parameters
freq = [10:2:1000]; % Frequency of piston excitation in Hz (should be maximum 500 Hz otherwise less then 6 elements per wavelength)
u_n = 1; % sound particle displacement with the piston excitation in m (adapt to change sound excitation power)

% Mesh Geometry
L=1; % Length of the tube
shape_type = 2; % 1 - linear shape functions; 2 - quadratic shape functions 
boundary_x = 0; %  boundary wall x-position 
piston_x = L; %  Piston x-position
% *************************************************************************

%% Acoustical properties calculation

% Boundary
Z0 = rho0 * c0; % Calculate impedance of air
beta= 1/Z; % Calculate admittances from impedances
Nmat = 1; % number of materials
% Model acoustical admittances with Mommertz (1996) method
% Mommertz, E. (1996): Untersuchung akustischer Wandeigenschaften und Modellierung der Schallrückwürfe in der binauralen Raumsimulation. Dissertation. RWTH Aachen, Fakultät für Elektrotechnik und Informationstechnik, S. 122. 

fprintf('Modelled acoustical impedance (Mommertz, 1996) for ');
if(model_Z_by_alpha)
    fprintf('wall:\n')
    beta=1/(Mommertz(alpha)*Z0);
    fprintf('%.0f Pa s/m3 \n',1/beta);
end

% Excitation
w = 2*pi*freq; % Calculate angular frequency of loudspeaker excitation frequency
lamda = c0./freq; % Calculate wave length of loudspeaker excitation frequency
lamda_min = c0/max(freq); % Smallest wavelength in the room
k0 = w /c0; % wave number

%% Generate Mesh
Ne_per_lamda_min = 6; % minimum number of elements per wavelength
Ne = ceil(Ne_per_lamda_min * L / lamda_min); % Total number of elements 
Nn = shape_type*Ne + 1; % Total number of nodes
Ne_Nn = shape_type + 1; % Number of nodes per element
h=L/Ne; % Element length
x = 0:h/shape_type:L; % Coordinates 
[~, piston_node] = min(abs(x - piston_x));
[~, boundary_node] = min(abs(x - boundary_x));
%% Compute elementary matrices
switch shape_type
    case 1  
        Ke = [1,-1;-1,1]*1/h;
        Me = [2,1;1,2]*h/6/c0^2;
    case 2
        Ke = [7,-8,1;-8,16,-8;1,-8,7]/(3*h);
        Me = [4,2,-1;2,16,2;-1,2,4]*h/30/c0^2;
end
%% Assemble stiffness and mass matrix

I=eye(Ne_Nn,Ne_Nn);
K=sparse(Nn,Nn); M = sparse(Nn,Nn);
for e=1:Ne
    LM = zeros(Ne_Nn,Nn); 
    LM(:,(Ne_Nn-1)*e-(Ne_Nn-2):(Ne_Nn-1)*e+1)=I;
    K = K + LM'*Ke*LM;
    M = M + LM'*Me*LM;
end
    
%% Add boundaries
A = zeros(Nn,Nn);
A(boundary_node,boundary_node) = beta; % *rho0
%% Add force vector and solve
Pquad_direct=zeros(1,Nn);
Pquad_modal=zeros(1,Nn);
Pquad_exact=zeros(1,Nn);
for nw=1:length(w)
    w_n=w(nw);
    f=zeros(Nn,1); % Force vector
    f(piston_node) = w_n^2*rho0*u_n; % at piston position
    A_solve = K - w_n^2*M/(1+1i*air_damp)+1i*w_n*A/(c0); % c0
    P = A_solve\f; % Solve the system to get pressure in tube
    Pquad_direct(nw) = (rho0*c0^2)* real(P'*M*P)/(2*L); % space avergaed quadratic pressure /(rho0*c0^2) because of M
    
    % Analytical solution
    k0=w_n/c0/sqrt(1+1i*air_damp);
    r=(Z-1)/(Z+1);
    a=(1j*w_n*u_n)*Z0/(exp(1j*k0*L)-r*exp(-1j*k0*L));
    x=[0:L/100:L]; p=a*(exp(-1i*k0*x)+r*exp(1i*k0*x));
    Pquad_exact(nw) = real(norm(p)^2/length(x)/2);
end

% Step 6: Comparison with the exact solution
plot(freq,10*log10(Pquad_direct(1:length(freq))),'k','LineWidth',2)
hold on
plot(freq,10*log10(Pquad_exact(1:length(freq))),':','LineWidth',2,'Color',[0.5 0.5 0.5])
xlabel('Frequency (Hz)');
ylabel(' Quadratic pressure (dB ref.1)');
legend('Analytical', 'FEM ');
text(100 , 95,['Analytical vs. FEM using ', num2str(Ne), ' quadratic elements'],'Color','k','FontSize',12)
text(100 , 90,['Specified normalized Impedance Z = ', num2str(Z)],'FontSize',12)
